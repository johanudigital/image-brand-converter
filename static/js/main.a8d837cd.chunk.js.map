{"version":3,"sources":["ImageStyleConverter.js","index.js"],"names":["ImageStyleConverter","image","setImage","useState","transparency","setTransparency","color","setColor","convertedImage","setConvertedImage","addGradient","setAddGradient","canvasRef","useRef","fileInputRef","_jsxs","className","children","_jsx","htmlFor","onClick","current","click","id","type","accept","onChange","e","file","target","files","reader","FileReader","onload","event","result","readAsDataURL","ref","min","max","value","checked","convertImage","canvas","ctx","getContext","img","Image","width","height","drawImage","globalCompositeOperation","fillStyle","globalAlpha","fillRect","gradient","createLinearGradient","addColorStop","toDataURL","src","disabled","downloadImage","link","document","createElement","href","download","alt","ReactDOM","render","Router","basename","process","getElementById"],"mappings":"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","file":"static/js/main.a8d837cd.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './index.css';\n\nconst ImageStyleConverter = () => {\n  const [image, setImage] = useState(null);\n  const [transparency, setTransparency] = useState(50);\n  const [color, setColor] = useState('#000000');\n  const [convertedImage, setConvertedImage] = useState(null);\n  const [addGradient, setAddGradient] = useState(false);\n  const canvasRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      setImage(event.target.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const convertImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n      \n      // Apply color overlay\n      ctx.globalCompositeOperation = 'multiply';\n      ctx.fillStyle = color;\n      ctx.globalAlpha = transparency / 100;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Apply gradient if selected\n      if (addGradient) {\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n        gradient.addColorStop(0, 'rgba(255, 255, 255, 0)');\n        gradient.addColorStop(1, color);\n        ctx.globalAlpha = 0.5;\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n      \n      // Reset composite operation and alpha\n      ctx.globalCompositeOperation = 'source-over';\n      ctx.globalAlpha = 1;\n      \n      setConvertedImage(canvas.toDataURL());\n    };\n    img.src = image;\n  };\n\n  const downloadImage = () => {\n    const link = document.createElement('a');\n    link.href = convertedImage;\n    link.download = 'converted-image.png';\n    link.click();\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Image Style Converter</h1>\n      <div className=\"input-group\">\n        <label htmlFor=\"image-upload\">Upload Image</label>\n        <div className=\"flex items-center\">\n          <button \n            onClick={() => fileInputRef.current.click()}\n            className=\"mr-2\"\n          >\n            Choose File\n          </button>\n          <span className=\"text-sm text-gray-500\">\n            {image ? 'Image selected' : 'No file chosen'}\n          </span>\n        </div>\n        <input\n          id=\"image-upload\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleImageUpload}\n          className=\"hidden\"\n          ref={fileInputRef}\n        />\n      </div>\n      \n      <div className=\"input-group\">\n        <label htmlFor=\"transparency\">Transparency: {transparency}%</label>\n        <input\n          id=\"transparency\"\n          type=\"range\"\n          min={0}\n          max={100}\n          value={transparency}\n          onChange={(e) => setTransparency(e.target.value)}\n          className=\"w-full\"\n        />\n      </div>\n      \n      <div className=\"input-group\">\n        <label htmlFor=\"color\">Brand Color</label>\n        <input\n          id=\"color\"\n          type=\"color\"\n          value={color}\n          onChange={(e) => setColor(e.target.value)}\n        />\n        <span className=\"text-sm\">{color}</span>\n      </div>\n      \n      <div className=\"input-group\">\n        <label htmlFor=\"gradient\">Add Gradient</label>\n        <input\n          id=\"gradient\"\n          type=\"checkbox\"\n          checked={addGradient}\n          onChange={(e) => setAddGradient(e.target.checked)}\n        />\n        <span className=\"text-sm\">Apply gradient overlay</span>\n      </div>\n      \n      <button onClick={convertImage} disabled={!image} className=\"w-full mb-4 bg-green-500 text-white px-4 py-2 rounded\">\n        Convert Image\n      </button>\n      \n      {convertedImage && (\n        <button onClick={downloadImage} className=\"w-full bg-blue-500 text-white px-4 py-2 rounded\">\n          Download Image\n        </button>\n      )}\n      \n      {image && (\n        <div className=\"input-group\">\n          <h2>Original Image</h2>\n          <img src={image} alt=\"Original\" />\n        </div>\n      )}\n      \n      {convertedImage && (\n        <div className=\"input-group\">\n          <h2>Converted Image</h2>\n          <img src={convertedImage} alt=\"Converted\" />\n        </div>\n      )}\n      \n      <div className=\"canvas-container\">\n        <canvas ref={canvasRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default ImageStyleConverter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ImageStyleConverter from './ImageStyleConverter';\nimport './index.css';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <ImageStyleConverter />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}