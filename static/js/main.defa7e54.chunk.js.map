{"version":3,"sources":["ImageStyleConverter.js","index.js"],"names":["ImageStyleConverter","image","setImage","useState","transparency","setTransparency","color","setColor","convertedImage","setConvertedImage","addGradient","setAddGradient","gradientPercentage","setGradientPercentage","canvasRef","useRef","fileInputRef","_jsxs","className","children","_jsx","id","type","accept","onChange","e","file","target","files","reader","FileReader","onload","event","result","readAsDataURL","ref","htmlFor","min","max","value","checked","_Fragment","onClick","convertImage","canvas","current","ctx","getContext","img","Image","width","height","drawImage","globalCompositeOperation","fillStyle","globalAlpha","fillRect","gradient","createLinearGradient","addColorStop","toDataURL","src","disabled","downloadImage","link","document","createElement","href","download","click","alt","ReactDOM","render","Router","basename","process","getElementById"],"mappings":"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","file":"static/js/main.defa7e54.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './index.css';\nimport logo from './assets/logo.jpg';\n\nconst ImageStyleConverter = () => {\n  const [image, setImage] = useState(null);\n  const [transparency, setTransparency] = useState(50);\n  const [color, setColor] = useState('#000000');\n  const [convertedImage, setConvertedImage] = useState(null);\n  const [addGradient, setAddGradient] = useState(false);\n  const [gradientPercentage, setGradientPercentage] = useState(50);\n  const canvasRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  const handleImageUpload = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      setImage(event.target.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const convertImage = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n\n      ctx.globalCompositeOperation = 'multiply';\n      ctx.fillStyle = color;\n      ctx.globalAlpha = transparency / 100;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      if (addGradient) {\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n        gradient.addColorStop(0, 'rgba(55, 55, 55, 0)');\n        gradient.addColorStop(1, color);\n        ctx.globalAlpha = gradientPercentage / 100;\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      ctx.globalCompositeOperation = 'source-over';\n      ctx.globalAlpha = 1;\n\n      setConvertedImage(canvas.toDataURL());\n    };\n    img.src = image;\n  };\n\n  const downloadImage = () => {\n    const link = document.createElement('a');\n    link.href = convertedImage;\n    link.download = 'converted-image.png';\n    link.click();\n  };\n\nreturn (\n    <div className=\"container\">\n      <h1>\n        Image Style Converter\n      </h1>\n      <div>\n        <input\n          id=\"image-upload\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleImageUpload}\n          className=\"hidden\"\n          ref={fileInputRef}\n        />\n      </div>\n\n      <div className=\"input-group\">\n        <label htmlFor=\"transparency\">Transparency: {transparency}%</label>\n        <input\n          id=\"transparency\"\n          type=\"range\"\n          min={0}\n          max={100}\n          value={transparency}\n          onChange={(e) => setTransparency(e.target.value)}\n          className=\"w-full\"\n        />\n      </div>\n\n      <div className=\"input-group\">\n        <label htmlFor=\"color\">Brand Color</label>\n        <input\n          id=\"color\"\n          type=\"color\"\n          value={color}\n          onChange={(e) => setColor(e.target.value)}\n          className=\"w-3\"\n        />\n        <span className=\"text-sm\">{color}</span>\n      </div>\n\n      <div className=\"input-group align-left\">\n        <input\n          id=\"gradient\"\n          type=\"checkbox\"\n          checked={addGradient}\n          onChange={(e) => setAddGradient(e.target.checked)}\n          className=\"mr-\"\n        />\n        <label htmlFor=\"gradient\" className=\"mr-\">Add Gradient</label>\n        {addGradient && (\n          <>\n            <input\n              id=\"gradient-percentage\"\n              type=\"range\"\n              min={0}\n              max={100}\n              value={gradientPercentage}\n              onChange={(e) => setGradientPercentage(e.target.value)}\n              className=\"w-full\"\n            />\n            <span className=\"text-sm ml-\">{gradientPercentage}%</span>\n          </>\n        )}\n      </div>\n\n      <button onClick={convertImage} disabled={!image} className=\"w-full mb-4 orange\">\n        Convert Image\n      </button>\n\n      {convertedImage && (\n        <button onClick={downloadImage} className=\"w-full mb-4 black\">\n          Download Image\n        </button>\n      )}\n\n      {image && (\n        <div className=\"input-group\">\n          <h2>Original Image</h2>\n          <img src={image} alt=\"Original\" />\n        </div>\n      )}\n\n      {convertedImage && (\n        <div className=\"input-group\">\n          <h2>Converted Image</h2>\n          <img src={convertedImage} alt=\"Converted\" />\n        </div>\n      )}\n\n      <div className=\"canvas-container\">\n        <canvas ref={canvasRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default ImageStyleConverter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport ImageStyleConverter from './ImageStyleConverter';\nimport './index.css';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <ImageStyleConverter />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}